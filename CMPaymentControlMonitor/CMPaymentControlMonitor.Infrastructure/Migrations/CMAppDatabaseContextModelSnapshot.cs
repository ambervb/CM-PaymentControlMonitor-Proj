//// <auto-generated />
//using System;
//using CMPaymentControlMonitor.Domain.Models;
//using CMPaymentControlMonitor.Infrastructure.Infrastructure;
//using Microsoft.EntityFrameworkCore;
//using Microsoft.EntityFrameworkCore.Infrastructure;
//using Microsoft.EntityFrameworkCore.Metadata;
//using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

//namespace CMPaymentControlMonitor.Domain.Migrations
//{
//    [DbContext(typeof(CMAppDatabaseContext))]
//    partial class CMAppDatabaseContextModelSnapshot : ModelSnapshot
//    {
//        protected override void BuildModel(ModelBuilder modelBuilder)
//        {
//#pragma warning disable 612, 618
//            modelBuilder
//                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
//                .HasAnnotation("Relational:MaxIdentifierLength", 128)
//                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

//            modelBuilder.Entity("CMPaymentControlMonitor.Domain.Models.Alert", b =>
//                {
//                    b.Property<int>("Id")
//                        .HasColumnName("ID");

//                    b.Property<DateTime?>("AlertCreatedOn")
//                        .HasColumnType("datetime");

//                    b.Property<int?>("CheckNavId");

//                    b.Property<string>("Comment")
//                        .HasMaxLength(255);

//                    b.Property<long?>("PaymentId");

//                    b.Property<bool?>("Resolved");

//                    b.HasKey("Id");

//                    b.HasIndex("CheckNavId");

//                    b.HasIndex("PaymentId");

//                    b.ToTable("Alerts");
//                });

//            modelBuilder.Entity("CMPaymentControlMonitor.Domain.Models.ControlCheck", b =>
//                {
//                    b.Property<int>("Id")
//                        .HasColumnName("ID");

//                    b.Property<string>("Description")
//                        .HasMaxLength(255);

//                    b.Property<string>("Name")
//                        .HasMaxLength(255);

//                    b.HasKey("Id");

//                    b.ToTable("ControlChecks");
//                });

//            modelBuilder.Entity("CMPaymentControlMonitor.Domain.Models.Country", b =>
//                {
//                    b.Property<string>("IsoCode")
//                        .HasMaxLength(2)
//                        .IsUnicode(false);

//                    b.Property<string>("Name")
//                        .HasMaxLength(255);

//                    b.HasKey("IsoCode");

//                    b.ToTable("Countries");
//                });

//            modelBuilder.Entity("CMPaymentControlMonitor.Domain.Models.Currency", b =>
//                {
//                    b.Property<string>("CurrencyCode")
//                        .HasMaxLength(3)
//                        .IsUnicode(false);

//                    b.Property<string>("Description")
//                        .HasMaxLength(255)
//                        .IsUnicode(false);

//                    b.Property<int?>("Digits");

//                    b.Property<double?>("ExchangeRateToEuro");

//                    b.Property<bool?>("IsActive");

//                    b.HasKey("CurrencyCode");

//                    b.ToTable("Currencies");
//                });

//            modelBuilder.Entity("CMPaymentControlMonitor.Domain.Models.Merchant", b =>
//                {
//                    b.Property<string>("Id")
//                        .HasColumnName("ID")
//                        .HasMaxLength(32)
//                        .IsUnicode(false);

//                    b.Property<string>("City")
//                        .HasMaxLength(255);

//                    b.Property<string>("Country")
//                        .HasMaxLength(2)
//                        .IsUnicode(false);

//                    b.Property<int?>("MerchantCategoryCodeNavigationMcc");

//                    b.Property<string>("Name")
//                        .HasMaxLength(255);

//                    b.Property<string>("OrganizationId");

//                    b.HasKey("Id");

//                    b.HasIndex("MerchantCategoryCodeNavigationMcc");

//                    b.HasIndex("OrganizationId");

//                    b.ToTable("Merchants");
//                });

//            modelBuilder.Entity("CMPaymentControlMonitor.Domain.Models.MerchantCategoryCode", b =>
//                {
//                    b.Property<int>("Mcc");

//                    b.Property<string>("Description")
//                        .HasMaxLength(200);

//                    b.HasKey("Mcc");

//                    b.ToTable("MerchantCategoryCodes");
//                });

//            modelBuilder.Entity("CMPaymentControlMonitor.Domain.Models.Order", b =>
//                {
//                    b.Property<long>("Id")
//                        .HasColumnName("ID");

//                    b.Property<decimal?>("Amount")
//                        .HasColumnType("money");

//                    b.Property<string>("BuyerBillingCountryNavigationIsoCode");

//                    b.Property<string>("BuyerName")
//                        .HasMaxLength(511);

//                    b.Property<string>("BuyerShippingCountryNavigationIsoCode");

//                    b.Property<string>("Currency")
//                        .HasMaxLength(3)
//                        .IsUnicode(false);

//                    b.Property<string>("CurrencyNavigationCurrencyCode");

//                    b.Property<string>("Description")
//                        .HasMaxLength(255);

//                    b.Property<DateTime?>("MerchantCreatedOrderOn")
//                        .HasColumnType("datetime");

//                    b.Property<string>("MerchantId")
//                        .HasColumnName("MerchantID")
//                        .HasMaxLength(32)
//                        .IsUnicode(false);

//                    b.Property<DateTime?>("OrderCreatedOn")
//                        .HasColumnType("datetime");

//                    b.Property<string>("Reference")
//                        .HasMaxLength(255);

//                    b.HasKey("Id");

//                    b.HasIndex("BuyerBillingCountryNavigationIsoCode");

//                    b.HasIndex("BuyerShippingCountryNavigationIsoCode");

//                    b.HasIndex("CurrencyNavigationCurrencyCode");

//                    b.HasIndex("MerchantId");

//                    b.ToTable("Orders");
//                });

//            modelBuilder.Entity("CMPaymentControlMonitor.Domain.Models.Organization", b =>
//                {
//                    b.Property<string>("Id")
//                        .HasColumnName("ID")
//                        .HasMaxLength(32)
//                        .IsUnicode(false);

//                    b.Property<string>("AccountManagerName")
//                        .HasMaxLength(50);

//                    b.Property<Guid?>("Guid");

//                    b.Property<string>("Name")
//                        .HasMaxLength(255);

//                    b.HasKey("Id");

//                    b.ToTable("Organizations");
//                });

//            modelBuilder.Entity("CMPaymentControlMonitor.Domain.Models.Payment", b =>
//                {
//                    b.Property<long>("Id")
//                        .HasColumnName("ID");

//                    b.Property<string>("CreditCardBin")
//                        .HasColumnName("CreditCardBIN")
//                        .HasMaxLength(255);

//                    b.Property<decimal?>("MerchantAmount")
//                        .HasColumnType("money");

//                    b.Property<long?>("OrderId");

//                    b.Property<DateTime?>("PaymentCreatedOn")
//                        .HasColumnType("datetime");

//                    b.Property<string>("PaymentMethodNavigationPaymentMethod");

//                    b.Property<string>("Status")
//                        .HasMaxLength(255);

//                    b.Property<string>("StatusDetails")
//                        .HasMaxLength(255);

//                    b.HasKey("Id");

//                    b.HasIndex("OrderId");

//                    b.HasIndex("PaymentMethodNavigationPaymentMethod");

//                    b.ToTable("Payments");
//                });

//            modelBuilder.Entity("CMPaymentControlMonitor.Domain.Models.PaymentMethodC", b =>
//                {
//                    b.Property<string>("PaymentMethod")
//                        .HasMaxLength(255);

//                    b.Property<bool?>("IsCreditCard");

//                    b.Property<bool?>("IsPrepaid");

//                    b.HasKey("PaymentMethod");

//                    b.ToTable("PaymentMethods");
//                });

//            modelBuilder.Entity("CMPaymentControlMonitor.Domain.Models.Alert", b =>
//                {
//                    b.HasOne("CMPaymentControlMonitor.Domain.Models.ControlCheck", "CheckNav")
//                        .WithMany("Alerts")
//                        .HasForeignKey("CheckNavId")
//                        .HasConstraintName("FK_Alerts_ControlCheck");

//                    b.HasOne("CMPaymentControlMonitor.Domain.Models.Payment", "Payment")
//                        .WithMany("Alerts")
//                        .HasForeignKey("PaymentId")
//                        .HasConstraintName("FK_Alerts_Paymentsl");
//                });

//            modelBuilder.Entity("CMPaymentControlMonitor.Domain.Models.Merchant", b =>
//                {
//                    b.HasOne("CMPaymentControlMonitor.Domain.Models.MerchantCategoryCode", "MerchantCategoryCodeNavigation")
//                        .WithMany("Merchants")
//                        .HasForeignKey("MerchantCategoryCodeNavigationMcc")
//                        .HasConstraintName("FK_Merchants_MerchantCategoryCodes");

//                    b.HasOne("CMPaymentControlMonitor.Domain.Models.Organization", "Organization")
//                        .WithMany("Merchants")
//                        .HasForeignKey("OrganizationId")
//                        .HasConstraintName("FK_Merchants_Organizations");
//                });

//            modelBuilder.Entity("CMPaymentControlMonitor.Domain.Models.Order", b =>
//                {
//                    b.HasOne("CMPaymentControlMonitor.Domain.Models.Country", "BuyerBillingCountryNavigation")
//                        .WithMany("OrdersBuyerBillingCountryNavigation")
//                        .HasForeignKey("BuyerBillingCountryNavigationIsoCode")
//                        .HasConstraintName("FK_Orders_Billing");

//                    b.HasOne("CMPaymentControlMonitor.Domain.Models.Country", "BuyerShippingCountryNavigation")
//                        .WithMany("OrdersBuyerShippingCountryNavigation")
//                        .HasForeignKey("BuyerShippingCountryNavigationIsoCode")
//                        .HasConstraintName("FK_Orders_Shipping");

//                    b.HasOne("CMPaymentControlMonitor.Domain.Models.Currency", "CurrencyNavigation")
//                        .WithMany("Orders")
//                        .HasForeignKey("CurrencyNavigationCurrencyCode")
//                        .HasConstraintName("FK_Orders_Currency");

//                    b.HasOne("CMPaymentControlMonitor.Domain.Models.Merchant", "Merchant")
//                        .WithMany("Orders")
//                        .HasForeignKey("MerchantId")
//                        .HasConstraintName("FK_Orders_Merchant");
//                });

//            modelBuilder.Entity("CMPaymentControlMonitor.Domain.Models.Payment", b =>
//                {
//                    b.HasOne("CMPaymentControlMonitor.Domain.Models.Order", "Order")
//                        .WithMany("Payments")
//                        .HasForeignKey("OrderId")
//                        .HasConstraintName("FK_Payments_Order");

//                    b.HasOne("CMPaymentControlMonitor.Domain.Models.PaymentMethodC", "PaymentMethodNavigation")
//                        .WithMany("Payments")
//                        .HasForeignKey("PaymentMethodNavigationPaymentMethod")
//                        .HasConstraintName("FK_Payments_PayMethod");
//                });
//#pragma warning restore 612, 618
//        }
//    }
//}
